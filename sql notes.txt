CREATE DATABASE REG;
USE REG;
CREATE TABLE employee
(EMPNO INTEGER,
ENAME VARCHAR(20),
JOB VARCHAR(20),
HIREDATE VARCHAR(20),
MGR VARCHAR(20),
SAL DOUBLE,
COMM DOUBLE,
DEPTNO INTEGER);
SELECT * FROM employee;
INSERT INTO employee VALUES(7369, 'SMITH', 'CLERK', '17-Dec-2020', 7902,800,NULL, 20);
INSERT INTO employee VALUES(7499,'ALLEN','CLERK','17-DEC-80','7902',800,NULL,20);
INSERT INTO employee VALUES(7521,'WARD','SALESMAN','22-FEB-81',7698,1600,300,30);
INSERT INTO employee VALUES(7566,'JONES','MANAGER','02-APR-81',7839,2975,NULL,20);
INSERT INTO employee VALUES(7654,'MARTIN','SALESMAN','28-SEPT-81',7698,1250,1400,30);
INSERT INTO employee VALUES(7698,'BLAKE','MANAGER','01-MAY-81',7839,2850,NULL,30);


#1.Create the above table.
SELECT * FROM employee;

#2.Select the employees in department 30.
SELECT Ename FROM EMPLOYE where deptno=30; 

#3.List the names, numbers and departments of all clerks.
SELECT Ename,empno,deptno FROM EMPLOYE where job='clerk'; 

#4. Find the department numbers and names of employees of all departments with deptno greater than 20.
SELECT Ename,deptno FROM EMPLOYE where deptno>20; 

#5. Find employees whose commission is greater than their salaries.
SELECT Ename FROM EMPLOYE where comm>sal; 

#6. Find employees whose commission is greater than 60 % of their salaries.
select ename from employe where comm>0.6*sal;

#7. List name, job and salary of all employees in department 20 who earn more than 2000/-.
SELECT Ename FROM EMPLOYE where deptno=20 and sal>2000; 


#8. Find all salesmen in department 30 whose salary is greater than 1500/-.
SELECT Ename FROM EMPLOYE where job='salesman' and sal>1500 and deptno='30'; 


#9. Find all employees whose designation is either manager or president.
SELECT Ename FROM EMPLOYE where job='salesman' or job='president' ; 

#10. Find all managers who are not in department 30.
SELECT Ename FROM EMPLOYE where job='manager' and deptno!=30 ; 

#11. Find all the details of managers and clerks in dept 10.
SELECT Ename FROM EMPLOYE where job='manager' and job='clerk' and deptno=10; 


#12. Find the details of all the managers (in any dept) and clerks in dept 20.
SELECT Ename FROM EMPLOYE where (job='manager') or (job='clerk' and deptno=20); 

#13. Find the details of all the managers in dept. 10 and all clerks in dept 20 and all employees who are neither managers nor clerks but whose salary is more than or equal to 2000/-.
SELECT * FROM EMPLOYE where (job='manager' and deptno=10) or (job='clerk' and deptno=20) or (JOB <> 'MANAGER' AND JOB <> 'CLERK' AND SAL >= 2000); 


#14. Find the names of anyone in dept. 20 who is neither manager nor clerk.
SELECT ename FROM EMPLOYE where (JOB !='MANAGER' AND JOB != 'CLERK' AND deptno=20); 

#15. Find the names of employees who earn between 1200/- and 1400/-.
SELECT ename FROM EMPLOYE where sal<1400 and sal>1200; 

#16. Find the employees who are clerks, analysts or salesmen.
SELECT ename FROM EMPLOYE where job='clerk' or job='analyst' or job='salesman'; 

#17. Find the employees who are not clerks, analysts or salesmen.
SELECT ename FROM EMPLOYE where (job!='clerk' and job!='SALESMAN' and job!='analyst'); 


#18. Find the employees who do not receive commission.
SELECT ename FROM EMPLOYE where COMM IS NULL; 


#19. Find the different jobs of employees receiving commission.
SELECT JOB FROM EMPLOYE where COMM >0; 


#20. Find the employees who do not receive commission or whose commission is less than 100/-.
SELECT ENAME FROM EMPLOYE where COMM < 100 OR COMM IS NULL; 

#21. If all the employees not receiving commission is entitles to a bonus of Rs. 250/- show the net earnings of all the employees.
SELECT SUM(SAL + 250) FROM EMPLOYE where COMM IS NULL; 

#22. Find all the employees whose total earning is greater than 2000/- .
SELECT Ename FROM EMPLOYE where sal>2000;


#23. Find all the employees whose name begins or ends with ‘M’
SELECT Ename FROM EMPLOYE where ename like 'M%' or ename like '%m'; 


#24. Find all the employees whose names contain the letter ‘M’ in any case.
SELECT Ename FROM EMPLOYE where ename like '%M%';


#25. Find all the employees whose names are upto 15 character long and have letter ‘R’ as 3rd character of their names.
SELECT Ename FROM EMPLOYE where length(ename)<=15 and ename like '__r%';


#26. Find all the employees who were hired in the month of February (of any year).
SELECT Ename FROM EMPLOYE where hiredate like '%FEB%';

#27. Find all the employees who were hired on last day of the month.


#28. Find all the employees who were hired more than 2 years ago.
SELECT * FROM employee WHERE (DATEDIFF(CURDATE(), HIREDATE) > 730);

#29. Find the managers hired in the year 2003.
SELECT Ename FROM EMPLOYE where hiredate like '%2003%';

#30. Display the names and jobs of all the employees separated by a space.
SELECT CONCAT(ename,' ',job) from employee;

#31. Display the names of all the employees right aligning them to 15 characters.
SELECT CONCAT(ename ,space(15)) from employee;

#32. Display the names of all the employees padding them to the right up to 15 characters with ‘*’.
SELECT rpad('ename',15,'*') FROM employee;

#33. Display the names of all the employees without any leading ‘A’.
SELECT * FROM employee WHERE ename NOT LIKE 'A%';
	
#34. Display the names of all the employees without any trailing ‘R’.   
SELECT * FROM employee WHERE ename NOT LIKE 'R%';
	

#35. Show the first 3 and last 3 characters of the names of all the employees.





#36. Display the names of all the employees replacing ‘A’ with ‘a’.

SELECT REPLACE (ename, 'A','a') from employees;


#37. Display the names of all the employees and position where the string ‘AR’ occurs in the name.

 SELECT ENAME, LOCATE('AR',ENAME) FROM EMPLOYEE;



#38. Show the salary of all the employees , rounding it to the nearest Rs. 1000/-.

SELECT * FROM employee WHERE FLOOR(SAL) < 1000;



39. Show the salary of all the employees , ignoring the fraction less than Rs. 1000/-.




#40. Show the names of all the employees and date on which they completed 3 years of service.
SELECT ENAME, DATE_ADD(HIREDATE, INTERVAL 3 YEAR) FROM employee WHERE DATEDIFF(CURDATE(), DATE_ADD(HIREDATE, INTERVAL 3 YEAR))>0;

41. For each employee, display the no. of days passed since the employee joined the company.



#42. For each employee, display the no. of months passed since the employee joined the company.
SELECT FLOOR (DATEDIFF(CURDATE(), HIREDATE)/30) FROM employee;

43. Display the details of all the employees sorted on the names.
select ename from employe order by ename;


44. Display the names of the employees, based on the tenure with the oldest employee coming first.

45. Display the names, jobs and salaries of employees, sorting on job and salary.
select ename,job,sal from employe order by job,sal;

46. Display the names, jobs and salaries of employees, sorting on descending order of job and within job sorted on salary.
select ename,job,sal from employe order by job,sal desc;

47. List the employee names, department names and salary for those employees who have completed 1 year of service.

48. List the employee names, department names and salary for those employees who are earning 0 commission or commission is null. Sort your output in the order of department name.
select ename,deptno,sal from employe where comm!=null order by job;

49. List the employee names, department names and hiredate for those employees who have joined in 2003 . Sort your output in the order of joining date.


50. List all the department names along with the names of employees in them , irrespective of the fact whether any employee is there or not.
--------------------------------------------------------------------------------------------------------------------------------------------------------


SELECT COUNT(*) AS anyName FROM INFORMATION_SCHEMA.COLUMNS
WHERE table_schema = 'test_db' AND table_name = 'employee';
-------------------------------------------------------------------------------------------------------------------------------------

SELECT SUM(SAL) AS total, DEPTNO FROM employee GROUP BY DEPTNO HAVING SUM(SAL)>1000;
------------------------------------------------------------------------------------------------------------------------------------


SELECT * FROM customer WHERE cust_id IN (SELECT cust_id FROM orders);
---------------------------------------------------------------------------------------
-------------- Mongo DB commands ---------------------------



> show dbs
Batch97 0.000GB
Boot_Camp 0.000GB
admin 0.000GB
config 0.000GB
local 0.000GB
my_db 0.000GB



> use Batch97
switched to db Batch97

> db
Batch97



-----------------------------------
> create train_db
uncaught exception: SyntaxError: unexpected token: identifier :
@(shell):1:7
> use train_db
switched to db train_db
> db
train_db
> use Batch97
switched to db Batch97
> db.getCollectionNames()
[ "Employee" ]
> use train_db
switched to db train_db
> db.getCollectionNames()
[ ]
> db.createCollection('train')
{ "ok" : 1 }
> db.getCollectionNames()
[ "train" ]
> db.train.drop()
true
> db.getCollectionNames()
[ ]
> db.createCollection('train')
{ "ok" : 1 }

-----------------------------------------------------------

-----------------java---------------------
1.class is an imaginary thing(blueprint) which describes the p of roperties(variables) and behaviour(methods)